{"version":3,"file":"static/js/175.b09580c8.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\n\n\nexport default AppBanner;","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport useMyMarvelService from '../../services/MyMarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n//import aveng from '../../resources/img/Avengers.png';\n//import avengLogo from '../../resources/img/Avengers_logo.png';\n\n\nimport './comicsList.scss';\n\n\nconst ComicsList = (props) => {\n    const [comicsList, setComicsList] = useState([]);\n    const [offset, setOffset] = useState(0);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n\n    const {getComics, loading, error} = useMyMarvelService();\n    \n    //. Функция запроса комиксов\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getComics(offset)\n        .then(newComicsList => onComicsListLoaded(newComicsList, offset));\n    };\n\n    // Первоначальная загрузка данных (useEffect)\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    //Функция обновления данных (onComicsListLoaded)\n\n    const onComicsListLoaded = (newComicsList, newOffset) => {\n        setComicsList(prevComicsList => {\n            const ids = new Set(prevComicsList.map(item => item.id));\n            const filtredNew = newComicsList.filter(item => !ids.has(item.id));\n            return [...prevComicsList, ...filtredNew];\n        });\n        \n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setNewItemLoading(false);\n        setOffset(newOffset + 8);\n        setComicsEnded(ended);\n    };\n\n\n\n// Рендер списка комиксов (renderItems)\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            \n            \n            return (\n                <li \n                    className=\"comics__item\"\n                    key={item.id}\n                    onClick={() => {props.onComicsSelected(item.id)}}> \n                        <Link to={`/comics/${item.id}`}>\n                            <img className=\"comics__item-img\" src={item.thumbnail} alt={item.title} />\n                            <div className=\"comics__item-title\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                    \n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    };\n\n    const items = renderItems(comicsList);\n    console.log('items:', items);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <>\n       {/*  <div className=\"comics__banner\">\n            <img src={aveng} alt=\"avengers\" className=\"comics__banner-img\"/>\n            <div className=\"comics__banner-descr\">New comics every week! Stay tuned!</div>\n            <img src={avengLogo} alt=\"avengers-logo\" className=\"comics__banner-logo\"/>\n        </div> */}\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">Load more</div>\n            </button>\n        </div>\n        </>\n    );\n};\n\nComicsList.propTypes = {\n    onComicsSelected: PropTypes.func.isRequired\n};\n\nexport default ComicsList;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\n\r\nconst ComicsPage = () => {\r\n    const [selectedComics, setSelectadComics] = useState(null);\r\n        \r\n       /*  state = {\r\n            selectedChar: null\r\n        } */\r\n    const onComicsSelected = (id) => {\r\n        setSelectadComics(id);\r\n        \r\n        /* this.setState({\r\n            selectedChar: id\r\n        }) */\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList onComicsSelected={onComicsSelected}\r\n                        selectedComicsId={selectedComics} />\r\n        </>\r\n    )\r\n}\r\nexport default ComicsPage;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","props","comicsList","setComicsList","useState","offset","setOffset","newItemLoading","setNewItemLoading","comicsEnded","setComicsEnded","getComics","loading","error","useMyMarvelService","onRequest","initial","then","newComicsList","onComicsListLoaded","useEffect","newOffset","prevComicsList","ids","Set","map","item","id","filtredNew","filter","has","ended","length","items","arr","i","onClick","onComicsSelected","Link","to","thumbnail","title","price","renderItems","console","log","errorMessage","ErrorMessage","spinner","Spinner","_Fragment","disabled","style","ComicsPage","selectedComics","setSelectadComics","Helmet","name","content","ComicsList","selectedComicsId"],"sourceRoot":""}